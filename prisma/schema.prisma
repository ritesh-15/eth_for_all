generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode = "prisma"
}

enum Roles {
  ADMIN
  USER
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  phone         String?   @unique
  password      String?
  avatar        String?
  isVerified    Boolean   @default(false)
  walletAddress String?   @unique
  role          Roles     @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  sessions      Session[]
  bookings      Booking[]

  @@index([email, phone])
}

model Session {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([token, userId])
  @@index([userId])
}

model Movie {
  id          String   @id @default(uuid())
  name        String
  description String   @db.LongText
  duration    DateTime
  language    String
  releaseDate DateTime
  genere      String
  posterURL   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  shows       Show[]
}

model Show {
  id         String      @id @default(uuid())
  startTime  DateTime
  endTime    DateTime
  movieId    String
  movie      Movie       @relation(fields: [movieId], references: [id], onDelete: Cascade)
  cinemaHall CinemaHall?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  showSeats  ShowSeat[]
  bookings   Booking[]

  @@index([movieId])
}

model CinemaHall {
  id          String       @id @default(uuid())
  name        String
  totalSeats  Int
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  show        Show         @relation(fields: [showId], references: [id], onDelete: Cascade)
  showId      String       @unique
  cinemaSeats CinemaSeat[]
}

model CinemaSeat {
  id           String     @id @default(uuid())
  seatNumber   String     @unique
  cinemaHallId String
  cinemaHall   CinemaHall @relation(fields: [cinemaHallId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  showSeats    ShowSeat[]

  @@index([cinemaHallId])
}

enum SeatStatus {
  BOOKED
  FREE
}

model ShowSeat {
  id           String     @id @default(uuid())
  status       SeatStatus @default(FREE)
  price        Int
  cinemaSeatId String
  cinemaSeat   CinemaSeat @relation(fields: [cinemaSeatId], references: [id], onDelete: Cascade)
  showId       String
  show         Show       @relation(fields: [showId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@index([cinemaSeatId])
  @@index([showId])
}

model Booking {
  id            String   @id @default(uuid())
  numberOfSeats Int
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  showId        String
  show          Show     @relation(fields: [showId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  payment       Payment? @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  paymentId     String?

  @@index([showId])
  @@index([userId])
  @@index([paymentId])
}

enum PaymentMethod {
  ONLINE
  CRYPTO
}

model Payment {
  id            String        @id @default(uuid())
  amouont       Int
  paymentMethod PaymentMethod
  bookingId     String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  Booking       Booking[]
}
